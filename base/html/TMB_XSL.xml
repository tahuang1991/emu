<?xml version="1.0" encoding="UTF-8"?>
<xsl:transform xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:svg="http://www.w3.org/2000/svg">

  <xsl:output method="html" encoding="UTF-8" indent="yes"/>

  <xsl:variable name="BASEDIR"></xsl:variable>
  <xsl:variable name="THIS">TMB_XSL.xml</xsl:variable>

  <xsl:template name="geoContainer">
    <CSC_rings>
      <ring name="ME+4/2" x= "4900" y="0" phiOffset="-80" deltaPhi="-10" chamberCorners="-75,695 75,695 45,358 -45,358" yText="675"/>
      <ring name="ME+4/1" x= "4900" y="0" phiOffset="-75" deltaPhi="-20" chamberCorners="-75,345 75,345 39,178 -39,178" yText="325"/>
      <ring name="ME+3/2" x= "3500" y="0" phiOffset="-80" deltaPhi="-10" chamberCorners="-75,695 75,695 45,358 -45,358" yText="675"/>
      <ring name="ME+3/1" x= "3500" y="0" phiOffset="-75" deltaPhi="-20" chamberCorners="-75,345 75,345 39,161 -39,161" yText="325"/>
      <ring name="ME+2/2" x= "2100" y="0" phiOffset="-80" deltaPhi="-10" chamberCorners="-75,695 75,695 45,358 -45,358" yText="675"/>
      <ring name="ME+2/1" x= "2100" y="0" phiOffset="-75" deltaPhi="-20" chamberCorners="-75,345 75,345 39,139 -39,139" yText="325"/>
      <ring name="ME+1/3" x=  "700" y="0" phiOffset="-85" deltaPhi="-10" chamberCorners="-60,696 60,696 44,504 -44,504" yText="676"/>
      <ring name="ME+1/2" x=  "700" y="0" phiOffset="-85" deltaPhi="-10" chamberCorners="-52,448 52,448 38,275 -38,275" yText="428"/>
      <ring name="ME+1/1" x=  "700" y="0" phiOffset="-85" deltaPhi="-10" chamberCorners="-31,262 31,262 15,100 -15,100" yText="242"/>
      <ring name="ME-1/1" x= "-700" y="0" phiOffset="-85" deltaPhi="-10" chamberCorners="-31,262 31,262 15,100 -15,100" yText="242"/>
      <ring name="ME-1/2" x= "-700" y="0" phiOffset="-85" deltaPhi="-10" chamberCorners="-52,448 52,448 38,275 -38,275" yText="428"/>
      <ring name="ME-1/3" x= "-700" y="0" phiOffset="-85" deltaPhi="-10" chamberCorners="-60,696 60,696 44,504 -44,504" yText="676"/>
      <ring name="ME-2/1" x="-2100" y="0" phiOffset="-75" deltaPhi="-20" chamberCorners="-75,345 75,345 39,139 -39,139" yText="325"/>
      <ring name="ME-2/2" x="-2100" y="0" phiOffset="-80" deltaPhi="-10" chamberCorners="-75,695 75,695 45,358 -45,358" yText="675"/>
      <ring name="ME-3/1" x="-3500" y="0" phiOffset="-75" deltaPhi="-20" chamberCorners="-75,345 75,345 39,161 -39,161" yText="325"/>
      <ring name="ME-3/2" x="-3500" y="0" phiOffset="-80" deltaPhi="-10" chamberCorners="-75,695 75,695 45,358 -45,358" yText="675"/>
      <ring name="ME-4/1" x="-4900" y="0" phiOffset="-75" deltaPhi="-20" chamberCorners="-75,345 75,345 39,178 -39,178" yText="325"/>
      <ring name="ME-4/2" x="-4900" y="0" phiOffset="-80" deltaPhi="-10" chamberCorners="-75,695 75,695 45,358 -45,358" yText="675"/>
    </CSC_rings>
  </xsl:template>

  <xsl:template name="palette">
    <table id="paletteTable" class="palette"><tr>
      <td style="background-color: #220022; color: #220022;">-1</td>
      <td style="background-color: #000000;">0</td>
      <td style="background-color: #000022;">1</td>
      <td style="background-color: #000033;">2</td>
      <td style="background-color: #000055;">4</td>
      <td style="background-color: #000077;">8</td>
      <td style="background-color: #000099;">16</td>
      <td style="background-color: #0000bb;">32</td>
      <td style="background-color: #0000dd;">64</td>
      <td style="background-color: #0000ff;">128</td>
    </tr></table>
  </xsl:template>
  
<!-- START TABLE PART -->

  <xsl:template name="toolTips">
    <xsl:for-each select="//Chamber">
      <xsl:variable name="ENDCAP"><xsl:value-of select="@endcap"/></xsl:variable>
      <xsl:variable name="STATION"><xsl:value-of select="@station"/></xsl:variable>
      <xsl:variable name="VMECRATE"><xsl:value-of select="../PeripheralCrate/@VMEcrate"/></xsl:variable>
      <div class="tooltip" id="mapping_ME{@endcap}{@station}/{@type}/{format-number(@number,'00')}">
	<table class="mapping">
	  <tr>
	    <th class="chamber">chamber</th>
	    <th class="RUI">RUI</th>
	    <th class="DDU" colspan="3">DDU</th>
	    <th class="DCC" colspan="2">DCC</th>
	    <th class="fiber" colspan="3">fiber cassette</th>
	    <th class="PC" colspan="4">peripheral crate</th>
	    <th class="SP">SP</th>
	  </tr>
	  <tr>
	    <th class="chamber">name</th>
	    <th class="RUI">instance</th>
	    <th class="DDU">crate</th>
	    <th class="DDU">slot</th>
	    <th class="DDU">input</th>
	    <th class="DCC">fifo</th>
	    <th class="DCC">S-link</th>
	    <th class="fiber">crate</th>
	    <th class="fiber">position</th>
	    <th class="fiber">socket</th>
	    <th class="PC">name</th>
	    <th class="PC">id</th>
	    <th class="PC">sector</th>
	    <th class="PC">DMB slot</th>
	    <th class="SP">id</th>
	  </tr>
	  <tr>
	    <td class="chamber">ME<xsl:value-of select="translate(@endcap,'-','&#8211;')"/><xsl:value-of select="@station"/>/<xsl:value-of select="@type"/>/<xsl:value-of select="format-number(@number,'00')"/></td>
	    <td class="RUI"><xsl:value-of select="../../../@instance"/></td>
	    <td class="DDU"><xsl:value-of select="../../@crate"/></td>
	    <td class="DDU"><xsl:value-of select="../../@slot"/></td>
	    <td class="DDU"><xsl:value-of select="../@id"/></td>
	    <td class="DCC"><xsl:value-of select="../../../DCC/@fifo"/></td>
	    <td class="DCC"><xsl:value-of select="../../../DCC/@slink"/></td>
	    <td class="fiber"><xsl:value-of select="../FiberCassette/@crate"/></td>
	    <td class="fiber"><xsl:value-of select="../FiberCassette/@pos"/></td>
	    <td class="fiber"><xsl:value-of select="../FiberCassette/@socket"/></td>
	    <td class="PC">VME<xsl:value-of select="translate(@endcap,'-','&#8211;')"/><xsl:value-of select="@station"/>/<xsl:value-of select="../PeripheralCrate/@VMEcrate"/></td>
	    <td class="PC"><xsl:value-of select="../PeripheralCrate/@id"/></td>
	    <td class="PC"><xsl:value-of select="../PeripheralCrate/@VMEcrate"/></td>
	    <td class="PC"><xsl:value-of select="../PeripheralCrate/@VMEslot"/></td>
	    <td class="SP"><xsl:value-of select="//PeripheralCrate[parent::SectorProcessor and @endcap=$ENDCAP and @station=$STATION and @VMEcrate=$VMECRATE]/../@id"/></td>
	  </tr>
	</table>
      </div>
    </xsl:for-each>
  </xsl:template>

  <xsl:template name="hiddenInfo">
    <!-- <xsl:message>hiddenInfo</xsl:message> -->
    <div class="hiddenInfo" id="div_hiddenInfo">
      <div class="hiddenInfo" id="div_RUIs">
	<xsl:for-each select="document(concat($BASEDIR,'RUI-to-chamber_mapping.xml'))//RUI">
	  <div class="hiddenInfo" id="div_RUI{@instance}">
	    <xsl:for-each select="DDU/input/Chamber">
	      <div class="hiddenInfo"><xsl:attribute name="id">div_ME<xsl:value-of select="@endcap"/><xsl:value-of select="@station"/>/<xsl:value-of select="@type"/>/<xsl:value-of select="format-number(@number,'00')"/></xsl:attribute></div>
	    </xsl:for-each>
	  </div>
	</xsl:for-each>
      </div>
      <div class="hiddenInfo" id="div_VMEs">
	<xsl:for-each select="document(concat($BASEDIR,'RUI-to-chamber_mapping.xml'))//PeripheralCrate">
	  <!-- Make sure to list this PeripheralCrate only once -->
	  <xsl:variable name="VMEID"><xsl:value-of select="@id"/></xsl:variable>
	  <xsl:variable name="VMENAME">VME<xsl:value-of select="translate(../Chamber/@endcap,'-','&#8211;')"/><xsl:value-of select="../Chamber/@station"/>/<xsl:value-of select="@VMEcrate"/></xsl:variable>
	  <xsl:if test="not(../preceding::input/PeripheralCrate[@id=$VMEID]) and not(../../../preceding::RUI/DDU/input/PeripheralCrate[@id=$VMEID])">
	    <div class="hiddenInfo" id="div_VME{$VMEID}" VMEName="{$VMENAME}">
	      <xsl:for-each select="document(concat($BASEDIR,'RUI-to-chamber_mapping.xml'))//Chamber[../PeripheralCrate/@id=$VMEID]">
		<!-- The id of 'div' element contains the chamber name, its text child the DMB slot. -->
		<div class="hiddenInfo"><xsl:attribute name="id">div_ME<xsl:value-of select="@endcap"/><xsl:value-of select="@station"/>/<xsl:value-of select="@type"/>/<xsl:value-of select="format-number(@number,'00')"/></xsl:attribute>slot<xsl:value-of select="../PeripheralCrate/@VMEslot"/></div>
	      </xsl:for-each>
	    </div>
	  </xsl:if>
	</xsl:for-each>
      </div>
      <div class="hiddenInfo" id="div_SPs">
	<xsl:for-each select="document(concat($BASEDIR,'RUI-to-chamber_mapping.xml'))//SectorProcessor">
	  <div class="hiddenInfo" id="div_SP{@id}">
	    <xsl:for-each select="PeripheralCrate">
	      <xsl:variable name="ENDCAP"><xsl:value-of select="@endcap"/></xsl:variable>
	      <xsl:variable name="STATION"><xsl:value-of select="@station"/></xsl:variable>
	      <xsl:variable name="VMENUM"><xsl:value-of select="@VMEcrate"/></xsl:variable>
	      <xsl:for-each select="document(concat($BASEDIR,'RUI-to-chamber_mapping.xml'))//Chamber[@endcap=$ENDCAP and @station=$STATION and ../PeripheralCrate/@VMEcrate=$VMENUM]">
		<div class="hiddenInfo"><xsl:attribute name="id">div_ME<xsl:value-of select="@endcap"/><xsl:value-of select="@station"/>/<xsl:value-of select="@type"/>/<xsl:value-of select="format-number(@number,'00')"/></xsl:attribute></div>
	      </xsl:for-each>
	    </xsl:for-each>
	  </div>
	</xsl:for-each>
      </div>
    </div>
  </xsl:template>

  <xsl:template name="loop_th">
    <xsl:param name="COUNT"/>
    <xsl:param name="MAX"/>
    <xsl:param name="COLS"/>
    <xsl:if test="$MAX>=$COUNT">
      <th>
	<xsl:attribute name="colspan"><xsl:value-of select="$COLS"/></xsl:attribute>
	<xsl:if test="9>=$COUNT"> </xsl:if><xsl:value-of select="$COUNT"/>
      </th>
      <xsl:call-template name="loop_th">
	<xsl:with-param name="COUNT"><xsl:value-of select="number($COUNT)+1"/></xsl:with-param>
	<xsl:with-param name="MAX"><xsl:value-of select="number($MAX)"/></xsl:with-param>
	<xsl:with-param name="COLS"><xsl:value-of select="$COLS"/></xsl:with-param>
      </xsl:call-template>
    </xsl:if>
  </xsl:template>

  <xsl:template name="loop_td">
    <xsl:param name="COUNT"/>
    <xsl:param name="MAX"/>
    <xsl:param name="RING"/>
    <xsl:param name="COLS"/>
    <xsl:if test="$MAX>=$COUNT">
      <xsl:variable name="CHAMBER_NAME"><xsl:value-of select="$RING"/>/<xsl:value-of select="format-number($COUNT,'00')"/></xsl:variable>
      <td name="td_count">
	<xsl:attribute name="id">td_<xsl:value-of select="$CHAMBER_NAME"/></xsl:attribute>
	<xsl:attribute name="colspan"><xsl:value-of select="$COLS"/></xsl:attribute>
	0
      </td>
      <xsl:call-template name="loop_td">
	<xsl:with-param name="COUNT"><xsl:value-of select="number($COUNT)+1"/></xsl:with-param>
	<xsl:with-param name="MAX"><xsl:value-of select="number($MAX)"/></xsl:with-param>
	<xsl:with-param name="RING"><xsl:value-of select="$RING"/></xsl:with-param>
	<xsl:with-param name="COLS"><xsl:value-of select="$COLS"/></xsl:with-param>
      </xsl:call-template>
    </xsl:if>
  </xsl:template>

  <xsl:template name="countsTable">
    <table id="countsTableParent" class="counts">

      <tr>
	<th></th>
	<th>Sum</th>
	<xsl:call-template name="loop_th">
	  <xsl:with-param name="COUNT">1</xsl:with-param>
	  <xsl:with-param name="MAX">18</xsl:with-param>
	  <xsl:with-param name="COLS">2</xsl:with-param>
	</xsl:call-template>
      </tr>
      
      <xsl:for-each select="document($THIS)/xsl:transform/xsl:template[@name='geoContainer']/CSC_rings/ring[substring(@name,3,1)='+']">
	<xsl:variable name="RING_NAME"><xsl:value-of select="@name"/></xsl:variable>
	<xsl:variable name="COLSPAN"><xsl:if test="@deltaPhi='-10'">1</xsl:if><xsl:if test="@deltaPhi='-20'">2</xsl:if></xsl:variable>
	<tr>
	  <th><xsl:value-of select="translate(@name,'-','&#8211;')"/></th>
	  <th class="sum" id="sum_ring_{$RING_NAME}"/>
	  <xsl:call-template name="loop_td">
	    <xsl:with-param name="COUNT">1</xsl:with-param>
	    <xsl:with-param name="MAX"><xsl:if test="@deltaPhi='-10'">36</xsl:if><xsl:if test="@deltaPhi='-20'">18</xsl:if></xsl:with-param>
	    <xsl:with-param name="RING"><xsl:value-of select="$RING_NAME"/></xsl:with-param>
	    <xsl:with-param name="COLS"><xsl:value-of select="$COLSPAN"/></xsl:with-param>
	  </xsl:call-template>
	</tr>
      </xsl:for-each>

      <tr>
	<th>ME+</th>
	<th class="sum" id="sum_endcap_plus"></th>
	<xsl:call-template name="loop_th">
	  <xsl:with-param name="COUNT">1</xsl:with-param>
	  <xsl:with-param name="MAX">36</xsl:with-param>
	  <xsl:with-param name="COLS">1</xsl:with-param>
	</xsl:call-template>
      </tr>

      <xsl:for-each select="document($THIS)/xsl:transform/xsl:template[@name='geoContainer']/CSC_rings/ring[substring(@name,3,1)='-']">
	<xsl:variable name="RING_NAME"><xsl:value-of select="@name"/></xsl:variable>
	<xsl:variable name="COLSPAN"><xsl:if test="@deltaPhi='-10'">1</xsl:if><xsl:if test="@deltaPhi='-20'">2</xsl:if></xsl:variable>
	<tr>
	  <th><xsl:value-of select="translate(@name,'-','&#8211;')"/></th>
	  <th class="sum" id="sum_ring_{$RING_NAME}"/>
	  <xsl:call-template name="loop_td">
	    <xsl:with-param name="COUNT">1</xsl:with-param>
	    <xsl:with-param name="MAX"><xsl:if test="@deltaPhi='-10'">36</xsl:if><xsl:if test="@deltaPhi='-20'">18</xsl:if></xsl:with-param>
	    <xsl:with-param name="RING"><xsl:value-of select="$RING_NAME"/></xsl:with-param>
	    <xsl:with-param name="COLS"><xsl:value-of select="$COLSPAN"/></xsl:with-param>
	  </xsl:call-template>
	</tr>
      </xsl:for-each>

      <tr>
	<th>ME&#8211;</th>
	<th class="sum" id="sum_endcap_minus"/>
	<xsl:call-template name="loop_th">
	  <xsl:with-param name="COUNT">1</xsl:with-param>
	  <xsl:with-param name="MAX">18</xsl:with-param>
	  <xsl:with-param name="COLS">2</xsl:with-param>
	</xsl:call-template>
      </tr>
      
    </table>
  </xsl:template>

<!-- END TABLE PART -->

<!-- START GRAPHICS PART -->

  <xsl:template mode="graphics" match="Chamber">
    <xsl:variable name="CHAMBER_NAME">ME<xsl:value-of select="@endcap"/><xsl:value-of select="@station"/>/<xsl:value-of select="@type"/>/<xsl:value-of select="format-number(@number,'00')"/></xsl:variable>
    <xsl:variable name="CHAMBER_NUMBER"><xsl:value-of select="@number"/></xsl:variable>
    <xsl:variable name="RING_NAME">ME<xsl:value-of select="@endcap"/><xsl:value-of select="@station"/>/<xsl:value-of select="@type"/></xsl:variable>
    <xsl:variable name="PHI"><xsl:value-of select="number(document($THIS)/xsl:transform/xsl:template[@name='geoContainer']/CSC_rings/ring[attribute::name=$RING_NAME]/@phiOffset)+number($CHAMBER_NUMBER)*number(document($THIS)/xsl:transform/xsl:template[@name='geoContainer']/CSC_rings/ring[attribute::name=$RING_NAME]/@deltaPhi)"/></xsl:variable>
    <xsl:variable name="CHAMBER_CORNERS"><xsl:value-of select="document($THIS)/xsl:transform/xsl:template[@name='geoContainer']/CSC_rings/ring[@name=$RING_NAME]/@chamberCorners"></xsl:value-of></xsl:variable>
    <xsl:variable name="TRANSFORMATIONS">translate(<xsl:value-of select="document($THIS)/xsl:transform/xsl:template[@name='geoContainer']/CSC_rings/ring[@name=$RING_NAME]/@x"/>, <xsl:value-of select="document($THIS)/xsl:transform/xsl:template[@name='geoContainer']/CSC_rings/ring[@name=$RING_NAME]/@y"/>) rotate(<xsl:value-of select="$PHI"/>,0,0)</xsl:variable>
    <xsl:variable name="Y_TEXT"><xsl:value-of select="document($THIS)/xsl:transform/xsl:template[@name='geoContainer']/CSC_rings/ring[@name=$RING_NAME]/@yText"/></xsl:variable>
    <xsl:variable name="FILL_COLOR">#000000</xsl:variable>
    <polygon xmlns="http://www.w3.org/2000/svg" id="{$CHAMBER_NAME}" class="" points="{$CHAMBER_CORNERS}" fill="{$FILL_COLOR}" stroke-width="6" opacity="0.8" transform="{$TRANSFORMATIONS}"/>
    <text xmlns="http://www.w3.org/2000/svg" id="label_{$CHAMBER_NAME}" y="{$Y_TEXT}" text-anchor="middle" transform="{$TRANSFORMATIONS}" font-size="60" fill="#777777" opacity="1"><xsl:value-of select="$CHAMBER_NUMBER"/></text>
  </xsl:template>


  <xsl:template name="captions">
    <xsl:for-each select="document($THIS)/xsl:transform/xsl:template[@name='geoContainer']/CSC_rings/ring[substring(@name,6,1)='2']">
      <text xmlns="http://www.w3.org/2000/svg" text-anchor="middle" font-size="200" fill="#aaaaaa" opacity="1">
	<xsl:attribute name="transform">translate(<xsl:value-of select="@x"/>,<xsl:value-of select="number(@y)+900"/>)</xsl:attribute>
	ME<xsl:if test="substring(@name,3,1)='-'">&#8211;</xsl:if><xsl:if test="substring(@name,3,1)='+'">+</xsl:if><xsl:value-of select="substring(@name,4,1)"/>
      </text>
    </xsl:for-each>
  </xsl:template>


  <xsl:template name="coordinateAxes">
    <g xmlns="http://www.w3.org/2000/svg" transform="translate(0,800)">
      <line x1="0" y1="0" x2="300" y2=   "0" stroke="#aaaaaa" stroke-width="10" opacity="1"/>
      <polygon points="300,0 220,-30 220,30" fill="#aaaaaa" opacity="1"/>
      <line x1="0" y1="0" x2=  "0" y2="-300" stroke="#aaaaaa" stroke-width="10" opacity="1"/>
      <polygon points="0,-300 -30,-220 30,-220" fill="#aaaaaa" opacity="1"/>
      <circle r="30" stroke="#aaaaaa" stroke-width="10" fill="#aaaaaa"/>
      <circle r="5"  stroke="#aaaaaa" stroke-width="10" fill="none"/>
      <text transform="translate(300, 0)" font-size="100" fill="#aaaaaa">X</text>
      <text transform="translate(0,-300)" font-size="100" fill="#aaaaaa">Y</text>
      <text transform="translate(-100,100)" font-size="100" fill="#aaaaaa">Z</text>
    </g>
  </xsl:template>


  <xsl:template name="focusedRUILabel">
    <rect xmlns="http://www.w3.org/2000/svg" id="focusedRUIBox" visibility="hidden" opacity="1" x="3900" y="750" width="600" height="200" fill="#000000"/>    
    <text xmlns="http://www.w3.org/2000/svg" id="focusedRUIText" visibility="hidden" text-anchor="middle" x="4200" y="890" font-size="100" fill="OrangeRed">RUI id</text>
  </xsl:template>

  <xsl:template name="sectorProcessorLabel">
      <rect xmlns="http://www.w3.org/2000/svg" id="sectorProcessorLabelBox" visibility="hidden" opacity="1" x="2500" y="750" width="600" height="200" fill="#000000"/>
      <text xmlns="http://www.w3.org/2000/svg" id="sectorProcessorLabelText" visibility="hidden" text-anchor="middle" x="2800" y="890" font-size="100" fill="OliveDrab">SP</text>
  </xsl:template>

  <xsl:template name="countLabel">
      <rect xmlns="http://www.w3.org/2000/svg" id="countLabelBox" visibility="hidden" opacity="1" x="1100" y="750" width="600" height="200" fill="#000000"/>
      <text xmlns="http://www.w3.org/2000/svg" id="countLabelText" visibility="hidden" text-anchor="middle" x="1400" y="890" font-size="100" fill="#ffffff">count</text>
  </xsl:template>

  <xsl:template name="focusedChamberLabel">
    <rect xmlns="http://www.w3.org/2000/svg" id="focusedChamberBox" visibility="hidden" opacity="1" x="-1750" y="750" width="700" height="200" fill="#000000"/>    
    <text xmlns="http://www.w3.org/2000/svg" id="focusedChamberText" visibility="hidden" text-anchor="middle" x="-1400" y="890" font-size="100" fill="#ffff00">MEES/T/Ch</text>
  </xsl:template>

  <xsl:template name="focusedVMELabel">
    <rect xmlns="http://www.w3.org/2000/svg" id="focusedVMEBox" visibility="hidden" opacity="1" x="-4600" y="750" width="800" height="200" fill="#000000"/>    
    <text xmlns="http://www.w3.org/2000/svg" id="focusedVMEText" visibility="hidden" text-anchor="middle" x="-4200" y="890" font-size="100" fill="#00ff00">VME id</text>
  </xsl:template>

  <xsl:template name="focusedDMBLabel">
    <rect xmlns="http://www.w3.org/2000/svg" id="focusedDMBBox" visibility="hidden" opacity="1" x="-3150" y="750" width="700" height="200" fill="#000000"/>    
    <text xmlns="http://www.w3.org/2000/svg" id="focusedDMBText" visibility="hidden" text-anchor="middle" x="-2800" y="890" font-size="100" fill="#ffff00">VME id</text>
  </xsl:template>


<!-- END GRAPHICS PART -->


  <xsl:template match="RUI-to-chamber_mapping">
    
	<table style="height: 100%; width: 100%; background-color: #222222;">
	  
	  <tr>
	    <td>
	      <form name="controls" action="">
		<table class="controls">
		  <tr>
		    <th>Time</th>
		    <th>&#916;t [s]</th>
		    <th colspan="1">Counter</th>
		    <th colspan="2">Sample</th>
		    <th colspan="2">Units</th>
		    <th colspan="2">Refresh</th>
		    <th colspan="3">Scale</th>
		  </tr>
		  <tr>
		    <td id="sampleTime"></td>
		    <td id="sampleDeltaT"></td>
		    <td>

		      <select id="counterSelector" title="Select counter." onchange="tmbPanel.onSampleOrCounterSwitch()">
			<option value="alct" title="Anode Local Charged Track (TMB counter 0)">ALCT</option>
			<option value="clct" title="Cathode Local Charged Track pretrigger (TMB counter 13)">CLCT</option>
			<option value="lct" title="CLCT*ALCT matched (TMB counter 30)" selected="selected">CLCT*ALCT matched</option>
			<option value="rejected" title="MPC rejected both LCTs (TMB counter 52)">Both LCTs rejected</option>
			<option value="l1a" title="TMB in Level-1 Accept window (TMB counter 54)">TMB in L1A window</option>
		      </select>
		    </td>
		    <td>
		      instantaneous <input type="radio" id="slidingSample" name="sampleSelector" value="sliding" checked="checked" title="Counts during the last few seconds." onclick="tmbPanel.onSampleOrCounterSwitch()"/>
		      </td><td>
		      cumulative <input type="radio" id="cumulativeSample" name="sampleSelector" value="cumulative" title="Count since the last reset." onclick="tmbPanel.onSampleOrCounterSwitch()"/>
<!-- 		      <input type="button" id="resetCumulative" name="reset" value="reset" title="Reset the cumulative counter now."/> -->
		    </td>
		    <td>
		      count <input type="radio" name="unitSelector" id="countUnits" value="count" checked="checked" title="Count." onclick="tmbPanel.onSampleOrCounterSwitch()"/>
		      </td><td>
		      count / m&#xb2; <input type="radio" name="unitSelector" id="densityUnits" value="density" title="Count per square meter." onclick="tmbPanel.onSampleOrCounterSwitch()"/>
		    </td>
		    <td>
		      auto <input type="checkbox" id="autoRefresh" checked="checked" title="Automatic refreshing of counters." onclick="tmbPanel.autoLoadData()"/>
		      every <input type="text" id="refreshPeriod" name="T_refresh" value="10" size="4" title="Period in seconds. (Don't hit 'Enter'.)"/> seconds
		      </td><td>
		      <input type="button" id="refreshNow" name="refresh" value="now" title="Refresh values now." onclick="tmbPanel.loadData()"/>
		    </td>
		    <td>
		      auto <input type="checkbox" id="autoScale" checked="checked" title="Let color scale adapt automatically." onclick="tmbPanel.onAutoScale(event)"/>
		      </td><td>
		      <input type="button" id="scaleDown" value="down" title="Adjust color scale manually. Uncheck 'auto' first." onclick="tmbPanel.onScale(event)"/>
		      <input type="button" id="scaleUp"  value="up" title="Adjust color scale manaully. Uncheck 'auto' first." onclick="tmbPanel.onScale(event)"/>
		      </td><td>
		      log <input type="checkbox" id="logScale" title="Use logarithmic color scale." onclick="tmbPanel.onLogScale()"/>
		    </td>
		  </tr>
		</table>
	      </form>
	    </td>
	  </tr>


	  <tr>
	    <td>
	      <xsl:call-template name="countsTable"/>
	    </td>
	  </tr>
	  
	  <tr>
	    <td>
	      <!-- <svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="960" height="300" preserveAspectRatio="*YMin meet"> -->
	      <svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="1920" height="300">
		<g transform="scale(0.17, 0.17) translate(5600,800)" id="group">
		  <!-- <xsl:apply-templates mode="graphics" select="/RUI-to-chamber_mapping/RUI[1]/DDU[1]/input/Chamber"/> -->
		  <xsl:apply-templates mode="graphics" select="/RUI-to-chamber_mapping/RUI/DDU/input/Chamber"/>
		  <xsl:call-template name="captions"/>
		  <xsl:call-template name="coordinateAxes"/>
		  <xsl:call-template name="countLabel"/>
		  <xsl:call-template name="sectorProcessorLabel"/>
		  <xsl:call-template name="focusedChamberLabel"/>
		  <xsl:call-template name="focusedVMELabel"/>
		  <xsl:call-template name="focusedDMBLabel"/>
		  <xsl:call-template name="focusedRUILabel"/>
		</g>
	      </svg>
	    </td>
	  </tr>

	  <tr>
	    <td>
	      <xsl:call-template name="palette"/>
	    </td>
	  </tr>

	</table>

    <xsl:call-template name="toolTips"/>
    <xsl:call-template name="hiddenInfo"/>

  </xsl:template>


</xsl:transform>
